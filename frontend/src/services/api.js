import axios from 'axios'
import { store } from '../store/store'
import { logout } from '../store/slices/authSlice'

// Configuraci√≥n base de Axios para comunicaci√≥n con el backend
const api = axios.create({
  baseURL: '/api',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
})

/**
 * Interceptor de Request - Agregar JWT autom√°ticamente
 * Basado en JwtAuthenticationFilter.java que espera: "Authorization: Bearer <token>"
 */
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token')
    
    if (token) {
      config.headers.Authorization = `Bearer ${token}`
      // Log solo para endpoints problem√°ticos
      if (config.url.includes('pagos') || config.url.includes('ordenes-pendientes')) {
        console.log('ÔøΩ Request a endpoint de pagos:', config.method.toUpperCase(), config.url)
      }
    } else {
      console.warn('‚ö†Ô∏è No hay token en localStorage para:', config.url)
    }
    
    return config
  },
  (error) => {
    return Promise.reject(error)
  }
)

/**
 * Interceptor de Response - Manejo avanzado de errores
 * Basado en errores reales del backend Spring Boot
 * 
 * üöß MODO DEBUG: Redirecciones autom√°ticas DESACTIVADAS temporalmente
 * Para facilitar debugging sin ventanas emergentes molestas
 */
api.interceptors.response.use(
  (response) => {
    return response
  },
  async (error) => {
    const { response } = error
    
    // Sin respuesta del servidor (sin conexi√≥n)
    if (!response) {
      console.error('üî¥ Error de conectividad:', error.message)
      // üöß DESACTIVADO: window.location.href = '/connectivity-error'
      console.warn('üöß [DEBUG MODE] Redirecci√≥n a connectivity-error DESACTIVADA')
      return Promise.reject(error)
    }
    
    // Manejo espec√≠fico por c√≥digo de error HTTP
    switch (response.status) {
      case 401:
        // Token expirado o inv√°lido
        console.error('üî¥ Error 401: Token expirado o inv√°lido')
        localStorage.removeItem('token')
        localStorage.removeItem('user')
        store.dispatch(logout())
        
        // üöß DESACTIVADO: Solo redirigir si no estamos ya en login
        // if (window.location.pathname !== '/login') {
        //   window.location.href = '/login'
        // }
        console.warn('üöß [DEBUG MODE] Redirecci√≥n autom√°tica a /login DESACTIVADA')
        break
        
      case 403:
        // Sin permisos - redirigir a p√°gina de acceso denegado
        console.error('üî¥ Error 403: Sin permisos para acceder')
        // üöß DESACTIVADO: if (window.location.pathname !== '/unauthorized') {
        //   window.location.href = '/unauthorized'
        // }
        console.warn('üöß [DEBUG MODE] Redirecci√≥n autom√°tica a /unauthorized DESACTIVADA')
        break
        
      case 404:
        // Recurso no encontrado
        console.warn('‚ö†Ô∏è Recurso no encontrado:', error.config?.url)
        // No redirigir autom√°ticamente para 404 de API
        break
        
      case 500:
      case 502:
      case 503:
      case 504:
        // Errores del servidor
        console.error('üî¥ Error del servidor:', response.status, error.config?.url)
        // üöß DESACTIVADO: if (window.location.pathname !== '/server-error') {
        //   window.location.href = '/server-error'
        // }
        console.warn('üöß [DEBUG MODE] Redirecci√≥n autom√°tica a /server-error DESACTIVADA')
        break
        
      default:
        // Otros errores - log para debugging
        console.error('üî¥ Error HTTP:', response.status, error.config?.url)
        break
    }
    
    return Promise.reject(error)
  }
)

export default api
